name: CI/CD - Docker Build & Deploy (Parallel)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    outputs:
      done: true
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Aggressive cleanup before build
        run: |
          echo "Disk usage before cleanup:"
          df -h
          sudo rm -rf /usr/local/lib/android /opt/ghc /usr/share/dotnet /usr/local/share/boost ~/.cache || true
          sudo apt-get clean
          sudo docker system prune -af --volumes
          sudo rm -rf /var/lib/docker/overlay2/*
          echo "Disk usage after cleanup:"
          df -h

      - name: Set output
        run: echo "done=true" >> $GITHUB_OUTPUT

  build-backend:
    needs: cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Backend
        uses: docker/build-push-action@v6
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/wntd-server:latest
            ${{ secrets.DOCKER_USERNAME }}/wntd-server:${{ github.sha }}
          build-args: |
            BUILDKIT_INLINE_CACHE=0

      - name: Prune Docker after backend
        run: docker system prune -af --volumes

  build-frontend:
    needs: cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Frontend
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/wntd-client:latest
            ${{ secrets.DOCKER_USERNAME }}/wntd-client:${{ github.sha }}
          build-args: |
            BUILDKIT_INLINE_CACHE=0

      - name: Prune Docker after frontend
        run: docker system prune -af --volumes

  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Copy deploy script & compose file
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.61.12.156 'sudo mkdir -p /opt/wntd'
          cat infra/docker-compose.prod.yml | ssh -o StrictHostKeyChecking=no ubuntu@13.61.12.156 "sudo tee /opt/wntd/docker-compose.prod.yml > /dev/null"
          cat infra/deploy.sh | ssh -o StrictHostKeyChecking=no ubuntu@13.61.12.156 "sudo tee /opt/wntd/deploy.sh > /dev/null && sudo chmod +x /opt/wntd/deploy.sh"

      - name: Install Docker on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.61.12.156 << 'EOF'
            if ! command -v docker &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            fi
            docker --version
          EOF

      - name: Run deploy script on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@13.61.12.156 'sudo /opt/wntd/deploy.sh'
